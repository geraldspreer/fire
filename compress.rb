#!/usr/bin/env ruby
# frozen_string_literal: true

require 'minitest/autorun'

class Comprossor
  def initialize(input)
    @data = input
  end

  def crunch
    res = []
    prev = @data.first
    c = 1
    @data[1..].each do |i|
      if i != prev
        res.push c
        res.push prev
        prev = i
        c = 0
      end
      c += 1
    end
    res.push c
    res.push prev

    res
  end

  def decrunch
    'foo'
  end
end

d = [
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(0, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(1, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(2, 0, 0)',
  'rgb(3, 0, 0)',
  'rgb(3, 0, 0)',
  'rgb(3, 0, 0)',
  'rgb(3, 0, 0)',
  'rgb(3, 1, 0)',
  'rgb(3, 1, 0)',
  'rgb(4, 1, 1)',
  'rgb(5, 1, 1)',
  'rgb(5, 1, 1)',
  'rgb(6, 1, 1)',
  'rgb(7, 1, 1)',
  'rgb(9, 1, 1)',
  'rgb(10, 1, 1)',
  'rgb(11, 1, 1)',
  'rgb(14, 1, 1)',
  'rgb(17, 1, 1)',
  'rgb(20, 1, 1)',
  'rgb(23, 1, 1)',
  'rgb(27, 1, 1)',
  'rgb(32, 1, 1)',
  'rgb(37, 1, 1)',
  'rgb(43, 1, 1)',
  'rgb(49, 1, 1)',
  'rgb(55, 1, 1)',
  'rgb(62, 4, 1)',
  'rgb(70, 8, 3)',
  'rgb(79, 11, 5)',
  'rgb(88, 16, 6)',
  'rgb(98, 21, 9)',
  'rgb(109, 29, 11)',
  'rgb(121, 36, 14)',
  'rgb(133, 44, 17)',
  'rgb(145, 52, 19)',
  'rgb(155, 58, 21)',
  'rgb(166, 65, 23)',
  'rgb(176, 73, 27)',
  'rgb(186, 81, 29)',
  'rgb(195, 88, 32)',
  'rgb(203, 96, 34)',
  'rgb(210, 102, 37)',
  'rgb(217, 109, 40)',
  'rgb(224, 117, 42)',
  'rgb(231, 126, 45)',
  'rgb(236, 137, 44)',
  'rgb(238, 151, 41)',
  'rgb(242, 163, 39)',
  'rgb(243, 170, 37)',
  'rgb(244, 178, 36)',
  'rgb(245, 186, 34)',
  'rgb(246, 192, 32)',
  'rgb(248, 200, 31)',
  'rgb(249, 207, 30)',
  'rgb(250, 214, 28)',
  'rgb(250, 221, 26)',
  'rgb(250, 227, 24)',
  'rgb(249, 233, 22)',
  'rgb(249, 239, 20)',
  'rgb(249, 240, 30)',
  'rgb(249, 240, 41)',
  'rgb(249, 241, 52)',
  'rgb(249, 241, 63)',
  'rgb(249, 242, 74)',
  'rgb(249, 242, 86)',
  'rgb(249, 243, 97)',
  'rgb(249, 243, 108)',
  'rgb(249, 244, 119)',
  'rgb(249, 244, 130)',
  'rgb(249, 245, 140)',
  'rgb(249, 245, 151)',
  'rgb(249, 245, 161)',
  'rgb(249, 246, 172)',
  'rgb(249, 246, 182)',
  'rgb(249, 247, 193)',
  'rgb(249, 247, 203)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)',
  'rgb(249, 247, 212)'
]

c = Comprossor.new d

puts c.crunch.inspect

# class CompressorTest < MiniTest::Test
#   def setup
#     input = [
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(0, 0, 0)',
#       'rgb(1, 0, 0)',
#       'rgb(1, 0, 0)',
#       'rgb(2, 0, 0)',
#       'rgb(2, 0, 0)',
#       'rgb(2, 0, 0)',
#     ]
#     @c = Comprossor.new(input)
#   end
#
#   def test_crunch
#     assert_equal [
#       8, 'rgb(0, 0, 0)',
#       2, 'rgb(1, 0, 0)',
#       3, 'rgb(2, 0, 0)',
#     ], @c.crunch
#   end
# end
